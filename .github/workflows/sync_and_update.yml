name: Sync and Update

on:
  # schedule:
    # - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  sync_and_update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout wwebjs-electron
      uses: actions/checkout@v2
      with:
        repository: AndyTargino/wwebjs-electron
        fetch-depth: 0

    - name: Obter a última versão do whatsapp-web.js
      id: latest_version
      run: |
        LATEST_TAG=$(curl --silent "https://api.github.com/repos/pedroslopez/whatsapp-web.js/tags" | jq -r '[.[] | .name | select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))][0]')
        echo "Última versão do whatsapp-web.js: $LATEST_TAG"
        echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

    - name: Verificar se a nova versão é mais recente
      id: check_version
      run: |
        MY_LATEST_VERSION=$(curl --silent "https://api.github.com/repos/AndyTargino/wwebjs-electron/releases/latest" | jq -r .tag_name)
        LATEST_LIB_VERSION=${{ steps.latest_version.outputs.version }}

        if [ -z "$LATEST_LIB_VERSION" ]; then
          echo "Não foi possível obter a última versão estável da biblioteca. Abortando."
          echo "should_continue=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Verificar se a release da versão da lib existe
        RELEASE_EXISTS=$(gh release view "$LATEST_LIB_VERSION" --json tagName --jq '.tagName' 2>/dev/null || echo "not_found")
        
        CLEAN_LATEST_LIB_VERSION=$(echo "$LATEST_LIB_VERSION" | sed -e 's/^v//' -e 's/^\.//')
        CLEAN_MY_LATEST_VERSION=$(echo "$MY_LATEST_VERSION" | sed -e 's/^v//' -e 's/^\.//')

        echo "Versão da lib (limpa): $CLEAN_LATEST_LIB_VERSION"
        echo "Minha versão (limpa): $CLEAN_MY_LATEST_VERSION"
        echo "Release $LATEST_LIB_VERSION existe: $([ "$RELEASE_EXISTS" != "not_found" ] && echo "sim" || echo "não")"

        # Continuar se: versão da lib é mais nova OU release não existe
        if [ "$RELEASE_EXISTS" = "not_found" ]; then
          echo "Release $LATEST_LIB_VERSION não existe, será criada"
          echo "should_continue=true" >> $GITHUB_OUTPUT
        elif [ "$(printf '%s\n' "$CLEAN_LATEST_LIB_VERSION" "$CLEAN_MY_LATEST_VERSION" | sort -V | head -n1)" = "$CLEAN_MY_LATEST_VERSION" ] && [ "$CLEAN_LATEST_LIB_VERSION" != "$CLEAN_MY_LATEST_VERSION" ]; then
          echo "Nova versão do whatsapp-web.js encontrada: $LATEST_LIB_VERSION (a sua é $MY_LATEST_VERSION)"
          echo "should_continue=true" >> $GITHUB_OUTPUT
        else
          echo "Sua versão $MY_LATEST_VERSION está atualizada e release existe."
          echo "should_continue=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

    - name: Criação da nova branch
      run: |
        if git show-ref --quiet refs/heads/temp-sync-branch; then
          git branch -D temp-sync-branch
        fi
        git checkout -b temp-sync-branch

    - name: Clonar e copiar arquivos do whatsapp-web.js
      if: steps.check_version.outputs.should_continue == 'true'
      run: |
        git clone --depth 1 -b ${{ steps.latest_version.outputs.version }} https://github.com/pedroslopez/whatsapp-web.js.git whatsapp-web.js
      
    - name: Copiar arquivos e remover diretório temporário
      if: steps.check_version.outputs.should_continue == 'true'
      run: rsync -a --exclude '.git/' --exclude 'README.md' --exclude 'package.json' --exclude '.eslintrc.json' --exclude '.github/' whatsapp-web.js/ ./

    - name: Aplicar modificações
      if: steps.check_version.outputs.should_continue == 'true'
      run: |
        PACKAGE_VERSION=$(jq -r .version whatsapp-web.js/package.json)
        jq '.version = $newVersion' --arg newVersion "$PACKAGE_VERSION" package.json > temp.json && mv temp.json package.json
        FILE_PATH="src/Client.js"
        sed -i 's/if (puppeteerOpts && (puppeteerOpts\.browserWSEndpoint || puppeteerOpts\.browserURL))/if (this.options.page) {\n            page = this.options.page;\n            browser = page.browser();\n        } else if (puppeteerOpts \&\& (puppeteerOpts.browserWSEndpoint || puppeteerOpts.browserURL))/' $FILE_PATH

    - name: Verificar se há alterações nos arquivos
      id: check_diff
      if: steps.check_version.outputs.should_continue == 'true'
      run: |
        git diff --quiet && echo "has_changes=false" >> $GITHUB_OUTPUT || echo "has_changes=true" >> $GITHUB_OUTPUT

    - name: Commit e Push
      if: steps.check_version.outputs.should_continue == 'true' && steps.check_diff.outputs.has_changes == 'true'
      run: |
        git config user.email "andytargino@outlook.com"
        git config user.name "AndyTargino"
        git add .
        git commit -m "Synchronized with upstream and applied custom changes" || echo "No changes to commit"
        git remote set-url origin https://${{ secrets.RELEASE_GITHUB_TOKEN }}@github.com/AndyTargino/wwebjs-electron.git
        git pull origin main --rebase
        git push --force --set-upstream origin temp-sync-branch
      env:
          GH_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

    - name: Criar e mesclar Pull Request
      if: steps.check_version.outputs.should_continue == 'true' && steps.check_diff.outputs.has_changes == 'true'
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/AndyTargino/wwebjs-electron.git
        PR_ID=$(gh pr create --base main --head temp-sync-branch --title "Sync with whatsapp-web.js ${{ steps.latest_version.outputs.version }}" --body "This PR includes the latest changes from the upstream and our custom changes." | grep -oP 'github.com/.+/pull/\K\d+')
        gh pr merge $PR_ID --merge
      env:
          GH_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

    - name: Criar release
      if: steps.check_version.outputs.should_continue == 'true' && steps.check_diff.outputs.has_changes == 'true'
      run: |
        VERSION_TAG=${{ steps.latest_version.outputs.version }}
        echo "Criando release: $VERSION_TAG"
        gh release create "$VERSION_TAG" --title "$VERSION_TAG" --notes "Synchronized with whatsapp-web.js version $VERSION_TAG" --generate-notes
      env:
          GH_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

    - name: Excluir branch temporária
      if: steps.check_version.outputs.should_continue == 'true'
      run: |
        if git ls-remote --exit-code origin temp-sync-branch >/dev/null 2>&1; then
          git push origin --delete temp-sync-branch || echo "Falha ao deletar branch, mas continuando..."
          echo "Branch temp-sync-branch deletada com sucesso"
        else
          echo "Branch temp-sync-branch não existe no remote, pulando exclusão"
        fi
      continue-on-error: true
      env:
           GH_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
